@model vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "CustomerForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Model.Customer.Id > 0)
{
    <h2>Edit Customer</h2>
}
else
{
    <h2>Add Customer</h2>
}


@using (@Html.BeginForm("Save", "Customers"))
{

    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Name)
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId,
        new SelectList(Model.MembershipTypes, "Id", "Name"),
        "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>


    <div class="mb-3 form-check">
        @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsletter, new { @class = "form-check-input" })
        <label class="form-check-label" for="exampleCheck1">
            Subscribe to Newsletter?
        </label>
    </div>
    @Html.HiddenFor(m => m.Customer.Id);
    @Html.AntiForgeryToken();
    @Html.ValidationSummary(true, "**Invalid fields!");
    <button type="submit" class="btn btn-primary">Save</button>
}

@*
    - Client-Side Validation
    - When using html helper method razor view engine add additional attr to the markup
      based on data annotations applied to the element
    - only work for standard validation not customized ones
*@

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
}